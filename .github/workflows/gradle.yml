name: Spring boot Gradle build & Github Action CI/CD

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  # 빌드
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    
    # JAVA 설정
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'temurin'
    
    # 캐시 설정
    - name: Check dependency cache
      uses: actions/cache@v2
      with:
        path: ${{ github.workspace }}/build
          
    # Gradle build
    - name: Build with Gradle
      uses: gradle/gradle-build-action@937999e9cc2425eddc7fd62d1053baf041147db7
      with:
        arguments: build
        
    # AWS 로그인
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # Docker 이미지 빌드
    - name: Docker Build
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: spring-boot-example
        IMAGE_TAG: ${GITHUB_SHA::8}
      run: |
        docker build -t spring-boot-example .
        docker tag spring-boot-example:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  
  # 배포
  deploy:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - uses: actions/checkout@v2
    
    # 캐시 설정
    - name: Check dependency cache
      uses: actions/cache@v2
      with:
        path: ${{ github.workspace }}/build
        
     # AWS 로그인
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    # AWS ECR 푸시
    - name: AWS ECR Push
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: spring-boot-example
        IMAGE_TAG: ${GITHUB_SHA::8}
      run: docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    

name: Spring boot Gradle build & Github Action CI/CD

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CACHED_BUILD_PATHS: ${{ github.workspace }}/build
  BUILD_CACHE_KEY: ${{ github.sha }}
  REPOSITORY_NAME: spring-boot-example
  
jobs:
  # 빌드
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

      
    # JAVA 설정
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'temurin'
    
    # 캐시 설정
    - name: Check Build Cache
      uses: actions/cache@v2
      with:
        path: ${{ env.CACHED_BUILD_PATHS }}
        key: ${{ env.BUILD_CACHE_KEY }}
          
    # Gradle build
    - name: Build with Gradle
      id: gradle-build
      run: |
        chmod +x gradlew
        ./gradlew build
    
    # 빌드 결과 업로드
    - name: Upload Build File
      uses: actions/upload-artifact@v2
      with:
        name: build
        path: build/libs/app.jar
    
  # 배포
  deploy:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - uses: actions/checkout@v2
      
    # 빌드 결과 다운로드
    - name: Download Build File
      uses: actions/download-artifact@v2
      with:
        name: build
        
    # 빌드 파일 경로 설정
    - name: Create Build Directory
      run: |
        mkdir build
        mkdir build/libs
        mv app.jar /build/libs/app.jar
      
     # AWS Credential 설정
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2
        
    # AWS 로그인
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # Docker 이미지 빌드
    - name: Docker Build
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.REPOSITORY_NAME }}
        IMAGE_TAG: ${{ github.run_number }}
      run: |
        docker build -t spring-boot-example .
        docker tag spring-boot-example:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      
    # 캐시 설정
    - name: Check Build Cache
      uses: actions/cache@v2
      with:
        path: ${{ env.CACHED_BUILD_PATHS }}
        key: ${{ env.BUILD_CACHE_KEY }}
      
    # AWS ECR 푸시
    - name: AWS ECR Push
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.REPOSITORY_NAME }}
        IMAGE_TAG: ${{ github.run_number }}
      run: docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    

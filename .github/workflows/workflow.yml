name: Docker Build and Deploy

on:
  # Workflow Manual
  workflow_dispatch:
    inputs:
      boolean:
        type: boolean
        description: 원격 서버 배포 (TODO)

  # Workflow Event
  #push:
  #  branches: [ master ]
  #pull_request:
  #  branches: [ master ]

env:
  CACHED_BUILD_PATHS: ${{ github.workspace }}/build
  BUILD_CACHE_KEY: ${{ github.sha }}
  REPOSITORY_NAME: spring-boot-example
  REGISTRY_URL: registry.gitlab.com/codingflowerdog/dev
  REGISTRY_NAME: spring-boot-example

jobs:
  # Gradle Build
  gradle-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      
      # JAVA 설정
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'

      # Gradle build
      - name: Build with Gradle
        id: gradle-build
        run: |
          chmod +x gradlew
          ./gradlew build

      # 빌드 결과 업로드
      - name: Upload Build File
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: build/libs/app.jar
  
  # Docker Build
  docker-build:
    runs-on: ubuntu-latest
    needs: gradle-build
    
    steps:
      - uses: actions/checkout@v2
      
      # 빌드 결과 다운로드
      - name: Download Build File
        uses: actions/download-artifact@v2
        with:
          name: build

      # 빌드 파일 경로 설정
      - name: Create Build Directory
        run: |
          mkdir -p build/libs 
          mv app.jar build/libs/app.jar

      # Docker 빌드
      - name: Docker Build
        run: |
          docker build -t spring-boot-example .
          docker tag spring-boot-example:latest ${{ env.REGISTRY_URL }}/${{ env.REPOSITORY_NAME }}:${{ github.run_number }}

      # Upload Docker Image Artifact
      - name: Upload Docker Image Artifact
        uses: ishworkh/docker-image-artifact-upload@v1
        with:
          image: ${{ env.REGISTRY_URL }}/${{ env.REPOSITORY_NAME }}:${{ github.run_number }}

  # Deploy
  deploy:
    runs-on: ubuntu-latest
    needs: docker-build

    steps:
      # Download Docker Image Artifact
      - name: Download Docker Image Artifact
        uses: ishworkh/docker-image-artifact-download@v1
        with:
          image: ${{ env.REGISTRY_URL }}/${{ env.REPOSITORY_NAME }}:${{ github.run_number }}

      # Gitlab 로그인
      - name: Gitlab Login
        run: docker login https://registry.gitlab.com/my_registry -u ${{ secrets.GITLAB_USER_NAME }} -p ${{ secrets.GITLAB_CONTAINER_ACCESS_TOKEN }}

      # Docker Push
      - name: Gitlab Push
        run: docker push ${{ env.REGISTRY_URL }}/${{ env.REPOSITORY_NAME }}:${{ github.run_number }}

    # TODO: 서버 원격 배포 추가

  # Clean
  clean:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - uses: actions/checkout@v1

      - name: Artifact Cleanup
        uses: jimschubert/delete-artifacts-action@v1
        with:
          log_level: 'debug'
          min_bytes: '0'
